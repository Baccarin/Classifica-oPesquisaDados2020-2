INSERTION SORT - PSEUDOCÓDIGO  O(n)

Durante (contador = 1; contador < vetor.tamanho; contador = contador + 1){
	chave = vetor[contador];
	posicaoaux = contador - 1;
	Enquanto ( posicaoaux >= 0 E vetor[posicaoaux] > chave){
		vetor[posicaoaux + 1] = vetor[posicaoaux];
		posicaoaux = posicaoaux - 1;
	}
}

-------------------------------------------------------------------------------------------------

SELECTION SORT - PSEUDOCÓDIGO O(n²)

Durante (contador = 0; contador < (vetor.tamanho - 1); contador = contador + 1){
	posicao = contador;
	durante (contadoraux=(contador + 1); contadoraux < vetor.tamanho; contadoaux++){
		se(vetor[posicao] > vetor[contadoraux]){
			posicao = contadoraux;
		}
	}
	se (posicao diferente contador){
		posicaoaux = vetor[contador];
		vetor[contador] = vetor[posicao];
		vetor[posicao] = posicaoaux;
	}
}
	

-------------------------------------------------------------------------------------------------
MERGE SORT - PSEUDOCÓDIGO O(n log n)

funcao merge (vetorA [])
	se (vetorA.tamanho == 1) returna 1

	l1[] = vetorA[0] até vetorA[tamanho/2]
	l2[][] = vetorA[tamanho/2+1] até vetorA[tamanho]
	
 	l1 = junta(l1)
	l2 = junta(l2)
	
	juntar retorno (l1 e l2)
final da funcao merge;

funcao juntar (vetor1[] , vetor2[])
	matrizX[][]
	enquanto (vetor1 e vetor2 não estão vazios)
		se(vetor1[0] maior vetor2[0])	
			adicionar vetor2[0] no final da matrizX	
			remover vetor2[0]
		se não
			adicionar vetor1[0] no final da matrizX
			remover vetor1[0]
	enquanto (vetor1 não está vazio)
		adiciona vetor1[0] no final da matrizX
		remover vetor[0] 
		
	enquanto (vetor2 não está vazio)
		adicionar vetor2[0] no final da matrizX
		remover vetor2[0]
     retornar matrizX
final da funcao juntar;
